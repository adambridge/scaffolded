Scaffolded stepful:

rails new scaffolded -d postgresql

config/database.yml
  username: stepful
  password: stepful

bin/rails db:create

bin/rails s

bin/rails g scaffold user name type phone
bin/rails g scaffold student --parent=user
bin/rails g scaffold coach --parent=user
bin/rails g scaffold call coach_id student_id start:datetime satisfaction:integer notes:text

bin/rails db:migrate

bin/rails c
Coach.create!(name: "Alice", phone: "001-456-7890")
Student.create!(name: "Bob", phone: "002-456-7890")

### Add relations ###

class Call < ApplicationRecord
  belongs_to :coach
  belongs_to :student
end

class Coach < User
  has_many :calls
end

class Student < User
  has_many :calls
end


alice = Coach.first
bob = Student.first
Call.new(coach: alice, student: bob, start: Time.zone.now + 1.day)

# Define root path
config/routes.rb:
  root "calls#index"


copy user partial to student and coach


bin/rails g controller sessions new

routes.rb:
  get "login" =>"sessions#new"
  resources :sessions

sessions/new.html.erb
<%= form_with(url: sessions_path, method: :post) do |f| %>
  <%= f.label :id, "User id:" %>
  <%= f.number_field :id  %>
  <%= f.submit "Log In" %>
<% end %> 

sessions_controller.rb
  def create
    @user = User.find params[:id]
    if @user
      session[:user_id] = @user.id
      redirect_to root_path
    else
      redirect_to login_path
    end
  end

+++ b/app/controllers/application_controller.rb
@@ -1,2 +1,5 @@
 class ApplicationController < ActionController::Base
+  def current_user
+    @current_user ||= User.find session[:user_id] if session[:user_id]
+  end

-    @calls = Call.all
+    @calls = current_user.calls.all

seeds.db:
alice = Coach.create!(name: "Alice", phone: "001-456-7890")
bob = Student.create!(name: "Bob", phone: "002-456-7890")
chris = Coach.create!(name: "Chris", phone: "003-456-7890")
diane = Student.create!(name: "Diane", phone: "004-456-7890")

Call.create!(coach: alice, student: bob, start: Time.zone.now + 1.day)
Call.create!(coach: chris, student: diane, start: Time.zone.now + 2.days)

Make current_user a helper:
class ApplicationController < ActionController::Base
  def current_user
    @current_user ||= User.find session[:user_id] if session[:user_id]
  end
  helper_method :current_user

redirect to login from calls (root) if not logged in:
class CallsController < ApplicationController
  before_action :set_call, only: %i[ show edit update destroy ]

  # GET /calls or /calls.json
  def index
    if current_user
      @calls = current_user.calls.all
    else
      redirect_to login_path
    end
  end

Show logged in user in application.html.erb:
  <body>
    <% if current_user %>
    <%= "Logged in as #{current_user.name}" %>
    <% else %>
    <%= link_to "login", login_path %>
    <% end %>
    <%= yield %>
  </body>

destroy session action:
  def destroy
    session[:user_id] = nil
    redirect_to login_path
  end

log out link
    <% if current_user %>
    <%= "Logged in as #{current_user.name} | " %>
    <%= link_to "log out", logout_path %>
    <% else %>
    <%= link_to "log in", login_path %>
    <% end %>
    <%= yield %>

route:
  get "logout" => "sessions#destroy"

coach with no calls yet:

emily = Coach.create!(name: "Emily", phone: "004-456-7890")

Availability partial:
<%= form_with(model: call) do |form| %>
  <% if call.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(call.errors.count, "error") %> prohibited this call from being saved:</h2>

      <ul>
        <% call.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= form.label :start, style: "display: block" %>
    <%= form.datetime_field :start %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

make belonging optional:   belongs_to :student, optional: true

call creation:

    @call = Call.new(availability_params)
    @call.coach = current_user

    def availability_params
      params.require(:call).permit(:start)
    end

calls index:
<% if current_user.type == "Coach" %>
  <%= link_to "Add Availability", new_call_path %>
<% end%>


New call view
<% if current_user.type == "Coach" %>
  <h1>Add Availability</h1>

  <%= render "availability", call: @call %>

  <br>

  <div>
    <%= link_to "Back to calls", calls_path %>
  </div>
<% else %>
  <h1>New call</h1>

  <%= render "form", call: @call %>

  <br>

  <div>
    <%= link_to "Back to calls", calls_path %>
  </div>
<% end %>


coach call view views/calls/coach/new.html.erb:
  <h1>Add Availability</h1>

  <%= render "availability", call: @call %>

  <br>

  <div>
    <%= link_to "Back to calls", calls_path %>
  </div>

calls controller:
  before_action :set_role

  # GET /calls/new
  def new
    @call = Call.new
    render "calls/#{@role}/new"
  end


    def set_role
      @role ||= current_user && current_user.type == "Coach" ? :coach : :student
    end

Make student optional on call:   belongs_to :student, optional: true
  belongs_to :student, optional: true

Also put index in coach subfolder

  # GET /calls or /calls.json
  def index
    if current_user
      @calls = current_user.calls.all
      render "calls/#{@role}/index"
    else
      redirect_to login_path
    end
  end

copy default templates into student folder too
